name: Build for windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: get gtk
      run: C:\msys64\usr\bin\wget.exe "https://pipelines.actions.githubusercontent.com/serviceHosts/f33e7cf4-5974-42aa-9327-28d0cc2c1997/_apis/pipelines/1/runs/4/signedartifactscontent?artifactName=gtk&urlExpires=2022-04-18T01%3A57%3A11.3995622Z&urlSigningMethod=HMACV2&urlSignature=dj%2BaIhjvuak6c%2FnPRW7zI0tNNHU3tmCfjheMAvDNz04%3D" -O ${{github.workspace}}/gtk.zip

    - name: extract gtk
      run: cd ${{github.workspace}} && 7z x gtk.zip
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DGTK_DIR=${{github.workspace}}/release -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: upload
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      uses: actions/upload-artifact@v3.0.0
      with:
        path: ${{github.workspace}}/build
    
